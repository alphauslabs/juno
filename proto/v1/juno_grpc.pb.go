// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JunoClient is the client API for Juno service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JunoClient interface {
	// Attempt to acquire a named lock.
	Lock(ctx context.Context, opts ...grpc.CallOption) (Juno_LockClient, error)
	// Add an item to a set.
	AddToSet(ctx context.Context, in *AddToSetRequest, opts ...grpc.CallOption) (*AddToSetResponse, error)
}

type junoClient struct {
	cc grpc.ClientConnInterface
}

func NewJunoClient(cc grpc.ClientConnInterface) JunoClient {
	return &junoClient{cc}
}

func (c *junoClient) Lock(ctx context.Context, opts ...grpc.CallOption) (Juno_LockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Juno_ServiceDesc.Streams[0], "/juno.proto.v1.Juno/Lock", opts...)
	if err != nil {
		return nil, err
	}
	x := &junoLockClient{stream}
	return x, nil
}

type Juno_LockClient interface {
	Send(*LockRequest) error
	Recv() (*LockResponse, error)
	grpc.ClientStream
}

type junoLockClient struct {
	grpc.ClientStream
}

func (x *junoLockClient) Send(m *LockRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *junoLockClient) Recv() (*LockResponse, error) {
	m := new(LockResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *junoClient) AddToSet(ctx context.Context, in *AddToSetRequest, opts ...grpc.CallOption) (*AddToSetResponse, error) {
	out := new(AddToSetResponse)
	err := c.cc.Invoke(ctx, "/juno.proto.v1.Juno/AddToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JunoServer is the server API for Juno service.
// All implementations must embed UnimplementedJunoServer
// for forward compatibility
type JunoServer interface {
	// Attempt to acquire a named lock.
	Lock(Juno_LockServer) error
	// Add an item to a set.
	AddToSet(context.Context, *AddToSetRequest) (*AddToSetResponse, error)
	mustEmbedUnimplementedJunoServer()
}

// UnimplementedJunoServer must be embedded to have forward compatible implementations.
type UnimplementedJunoServer struct {
}

func (UnimplementedJunoServer) Lock(Juno_LockServer) error {
	return status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedJunoServer) AddToSet(context.Context, *AddToSetRequest) (*AddToSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToSet not implemented")
}
func (UnimplementedJunoServer) mustEmbedUnimplementedJunoServer() {}

// UnsafeJunoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JunoServer will
// result in compilation errors.
type UnsafeJunoServer interface {
	mustEmbedUnimplementedJunoServer()
}

func RegisterJunoServer(s grpc.ServiceRegistrar, srv JunoServer) {
	s.RegisterService(&Juno_ServiceDesc, srv)
}

func _Juno_Lock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JunoServer).Lock(&junoLockServer{stream})
}

type Juno_LockServer interface {
	Send(*LockResponse) error
	Recv() (*LockRequest, error)
	grpc.ServerStream
}

type junoLockServer struct {
	grpc.ServerStream
}

func (x *junoLockServer) Send(m *LockResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *junoLockServer) Recv() (*LockRequest, error) {
	m := new(LockRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Juno_AddToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JunoServer).AddToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/juno.proto.v1.Juno/AddToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JunoServer).AddToSet(ctx, req.(*AddToSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Juno_ServiceDesc is the grpc.ServiceDesc for Juno service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Juno_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "juno.proto.v1.Juno",
	HandlerType: (*JunoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToSet",
			Handler:    _Juno_AddToSet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Lock",
			Handler:       _Juno_Lock_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/v1/juno.proto",
}
